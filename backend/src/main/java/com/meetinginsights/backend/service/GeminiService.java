package com.meetinginsights.backend.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.http.MediaType;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Map;

@Service
public class GeminiService {

    @Value("${GEMINI_API_KEY}")
    private String geminiApiKey;

    private final WebClient webClient;

    public GeminiService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("https://generativelanguage.googleapis.com").build();
    }

    private String buildPrompt(String transcript) {
        return """
            You are a professional meeting analyst. Analyze the following meeting transcript and generate a structured summary, action items, key decisions, and risks.

            Format your response as:
            üìå Summary:
            [Concise paragraph]

            ‚úÖ Action Items:
            - [Who] will [do what] by [when]

            üß† Key Decisions:
            - [Decision details]

            ‚ö†Ô∏è Risks or Concerns:
            - [Mention any risks]

            Transcript:
            ---
            %s
            ---
            """.formatted(transcript);
    }

    public Mono<String> generateInsights(String rawTranscript) {
        String url = "/v1beta3/models/gemini-pro:generateContent?key=" + geminiApiKey;
        String prompt = buildPrompt(rawTranscript);

        Map<String, Object> requestBody = Map.of(
                "contents", List.of(
                        Map.of("parts", List.of(Map.of("text", prompt)))
                )
        );

        return webClient.post()
                .uri(url)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(requestBody)
                .retrieve()
                .bodyToMono(Map.class)
                .map(response -> {
                    try {
                        var candidates = (List<Map<String, Object>>) response.get("candidates");
                        if (candidates != null && !candidates.isEmpty()) {
                            var content = (Map<String, Object>) candidates.get(0).get("content");
                            var parts = (List<Map<String, String>>) content.get("parts");
                            return parts.get(0).get("text");
                        }
                    } catch (Exception e) {
                        return "Error parsing Gemini response: " + e.getMessage();
                    }
                    return "No content generated by Gemini.";
                });
    }
}
